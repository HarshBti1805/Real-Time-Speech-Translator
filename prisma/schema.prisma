generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  image          String?
  emailVerified  DateTime? @map("email_verified")
  password       String?
  hashedPassword String?
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  transcriptions Transcription[]
  userPreferences UserPreferences?
  translationHistory TranslationHistory[]
  analytics      Analytics[]
  costTracking   CostTracking[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Transcription {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  inputType   String
  inputValue  String
  outputValue String
  createdAt   DateTime @default(now())

  @@map("transcriptions")
  @@index([userId, createdAt])
}

model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique @map("user_id")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  favoriteSourceLanguages String[] @default([]) // Array of language codes
  favoriteTargetLanguages String[] @default([]) // Array of language codes
  defaultSourceLanguage String   @default("en")
  defaultTargetLanguage String   @default("es")
  theme                 String   @default("dark")
  notificationsEnabled  Boolean  @default(true)
  autoSaveEnabled       Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("user_preferences")
}

model TranslationHistory {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sourceLanguage  String
  targetLanguage  String
  sourceText      String
  translatedText  String
  translationType String   // "text", "speech", "file"
  wordCount       Int      @default(0)
  characterCount  Int      @default(0)
  accuracy        Float?   // Translation accuracy score
  cost            Float    @default(0) // Cost in USD
  apiProvider     String   @default("google") // Which API was used
  createdAt       DateTime @default(now())

  @@map("translation_history")
  @@index([userId, createdAt])
  @@index([translationType, createdAt])
}

model Analytics {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date            DateTime @default(now())
  translationsCount Int    @default(0)
  wordsTranslated Int      @default(0)
  charactersTranslated Int @default(0)
  totalCost       Float    @default(0)
  mostUsedSourceLanguage String?
  mostUsedTargetLanguage String?
  averageAccuracy Float?
  sessionDuration Int?     // in seconds
  createdAt       DateTime @default(now())

  @@map("analytics")
  @@index([userId, date])
}

model CostTracking {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date            DateTime @default(now())
  apiProvider     String
  serviceType     String   // "translation", "speech", "ocr", etc.
  usageAmount     Float    // Number of characters, words, or API calls
  costPerUnit     Float    // Cost per character, word, or API call
  totalCost       Float
  currency        String   @default("USD")
  createdAt       DateTime @default(now())

  @@map("cost_tracking")
  @@index([userId, date])
  @@index([apiProvider, date])
}

enum Role {
  USER
  ADMIN
}
